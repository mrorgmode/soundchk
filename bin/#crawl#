#!/usr/bin/perl -w
# crawl
#
# Usage:
#  crawl ( --stop|-l stopfile ) ( --type type ) ( --dest|-d destdir )
# License: 
#  http://www.gnu.org/licenses/gpl-3.0.txt
#
# Per Weijnitz <per.weijnitz@gmail.com>

use strict;
use Getopt::Long;

use lib("/home/perweij/SparkleShare/soundchk/lib");
use Youtube;
use CrawlDB;


my %opts = ( dest => '.',
	     type => 'general' );
GetOptions('stop|l=s'  => \$opts{'stop'},
	   'type|t=s'  => \$opts{'music'},
	   'dest|d=s'  => \$opts{'dest'},
    );


chdir($opts{dest}) || die("directory does not exist $opts{dest}");

my $filebase = $opts{dest}."/crawldb";
my $cdb = CrawlDB->new(filebase => $filebase);


my $max_link_result_pages = 5;


if(! $cdb->todolist_size()) {
  my $terms = join(" ", @ARGV);
  system("echo '$terms' > $filebase.terms.txt");
  system("echo '$opts{type}' > $filebase.type.txt");
  my $links = Youtube::get_links($terms, pages => $max_link_result_pages);
  &links2todo($links);
} else {
    chomp($opts{type} = `cat $filebase.type.txt`);
}



while($cdb->todolist_size()) {
  my $l = $cdb->nextLink();
  print STDERR "[main] $l->{code}\n";
  my $related = Youtube::getRelatedLinks($l->{code});
  &links2todo($related);
  &process($l);
  exit if(! $opts{'stop'}
	  || -f $opts{'stop'});
}

$cdb->end();

#######################################################


sub links2todo {
  my $links = shift;
  print STDERR "[links2todo] ";
  while ($links 
	 && @{$links}) {
    my $link = shift(@{$links});
    next unless($link =~ /^.*watch\?v=(.+?)(\&|$)/);
    my $code = $1;

    next if($cdb->isAdded(code => $code));
    print STDERR ".";
    $cdb->add(code => $code);
  }
  print STDERR "!\n";
}



sub process {
  my $link = shift;

  my $info = Youtube::get_info(code => $link->{code});
  my $wav = Youtube::extract_audio(code => $link->{code});
  normalise_wav($wav);
  my $flac = $wav;
  $flac =~ s/.wav$/__type=$opts{type}.flac/;
  wav_to_flac($wav, $flac);
  unlink($wav);
  my %status = ( %{$link}, %{$info} );
  $status{status} = 'done';
  print STDERR "[process] set status ".join(" ", map { "$_:".$status{$_} } sort keys %status)."\n";
  $cdb->setStatus(%status);
}



sub normalise_wav {
    my ($file) = @_;

    return system("normalize-audio $file") == 0;
}



sub wav_to_flac {
    my ($in, $out) = @_;

    die("input file should end with .wav") unless($in =~ /\.wav$/i);
    die("output file should end with .flac") unless($out =~ /\.flac$/i);

    return system("flake $in -o $out") == 0;
}
